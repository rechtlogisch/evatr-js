name: Daily API Update Check

on:
  schedule:
    # Run every day at 8:00 AM UTC
    - cron: '0 8 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  check-api-updates:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup cache for API documents
        uses: actions/cache@v3
        id: api-cache
        with:
          path: |
            docs/api-docs.json
            docs/statusmeldungen.json
          key: api-docs-${{ github.run_id }}
          restore-keys: |
            api-docs-

      - name: Create docs directory
        run: mkdir -p docs

      - name: Store initial state
        run: |
          # Create checksums of existing files for comparison
          echo "Storing initial state..."
          if [ -f "docs/api-docs.json" ]; then
            md5sum docs/api-docs.json > initial_api_checksum.txt || shasum -a 256 docs/api-docs.json > initial_api_checksum.txt
            echo "Found existing API docs"
          else
            echo "no-existing-api-docs" > initial_api_checksum.txt
            echo "No existing API docs found"
          fi
          
          if [ -f "docs/statusmeldungen.json" ]; then
            md5sum docs/statusmeldungen.json > initial_status_checksum.txt || shasum -a 256 docs/statusmeldungen.json > initial_status_checksum.txt
            echo "Found existing status messages"
          else
            echo "no-existing-status-messages" > initial_status_checksum.txt
            echo "No existing status messages found"
          fi

      - name: Run API update check
        id: api-check
        run: |
          echo "Running API update check..."
          
          # Capture output and exit code
          if npm run update:api check > api_update_output.txt 2>&1; then
            echo "api_check_success=true" >> $GITHUB_OUTPUT
            echo "API check completed successfully"
          else
            echo "api_check_success=false" >> $GITHUB_OUTPUT
            echo "API check detected changes or failed"
          fi
          
          # Always capture the output for later use
          echo "API Update Check Results:" > formatted_output.txt
          echo "=========================" >> formatted_output.txt
          cat api_update_output.txt >> formatted_output.txt
          
          # Check for changes by comparing checksums and git status
          changes_detected=false
          
          # Method 1: Git-based change detection (preferred)
          if command -v git >/dev/null 2>&1; then
            echo "Using git for change detection..."
            if ! git diff --quiet || ! git diff --cached --quiet; then
              changes_detected=true
              echo "Git detected file changes"
              
              # Show what changed
              echo "" >> formatted_output.txt
              echo "Git Status:" >> formatted_output.txt
              echo "===========" >> formatted_output.txt
              git status --porcelain >> formatted_output.txt || echo "Could not get git status" >> formatted_output.txt
              
              echo "" >> formatted_output.txt
              echo "File Differences:" >> formatted_output.txt
              echo "=================" >> formatted_output.txt
              git diff --no-color >> formatted_output.txt || echo "Could not get git diff" >> formatted_output.txt
              git diff --cached --no-color >> formatted_output.txt || echo "Could not get cached git diff" >> formatted_output.txt
            fi
          fi
          
          # Method 2: Checksum-based change detection (fallback)
          echo "Checking for file changes via checksums..."
          
          # Check API docs changes
          if [ -f "docs/api-docs.json" ]; then
            current_api_checksum=$(md5sum docs/api-docs.json 2>/dev/null || shasum -a 256 docs/api-docs.json 2>/dev/null || echo "checksum-failed")
            initial_api_checksum=$(cat initial_api_checksum.txt 2>/dev/null || echo "no-initial")
            
            if [ "$current_api_checksum" != "$initial_api_checksum" ]; then
              changes_detected=true
              echo "API docs changed: checksum mismatch"
              echo "" >> formatted_output.txt
              echo "API Docs Changes:" >> formatted_output.txt
              echo "=================" >> formatted_output.txt
              echo "Initial: $initial_api_checksum" >> formatted_output.txt
              echo "Current: $current_api_checksum" >> formatted_output.txt
            fi
          fi
          
          # Check status messages changes
          if [ -f "docs/statusmeldungen.json" ]; then
            current_status_checksum=$(md5sum docs/statusmeldungen.json 2>/dev/null || shasum -a 256 docs/statusmeldungen.json 2>/dev/null || echo "checksum-failed")
            initial_status_checksum=$(cat initial_status_checksum.txt 2>/dev/null || echo "no-initial")
            
            if [ "$current_status_checksum" != "$initial_status_checksum" ]; then
              changes_detected=true
              echo "Status messages changed: checksum mismatch"
              echo "" >> formatted_output.txt
              echo "Status Messages Changes:" >> formatted_output.txt
              echo "========================" >> formatted_output.txt
              echo "Initial: $initial_status_checksum" >> formatted_output.txt
              echo "Current: $current_status_checksum" >> formatted_output.txt
            fi
          fi
          
          # Method 3: Look for timestamped files (additional check)
          today=$(date +%Y-%m-%d)
          if [ -n "$(find docs -name "*$today*.json" 2>/dev/null)" ]; then
            changes_detected=true
            echo "Found timestamped files from today"
            echo "" >> formatted_output.txt
            echo "New Timestamped Files:" >> formatted_output.txt
            echo "======================" >> formatted_output.txt
            find docs -name "*$today*.json" -exec ls -la {} \; >> formatted_output.txt 2>/dev/null
          fi
          
          # Set the output based on detection results
          if [ "$changes_detected" = "true" ]; then
            echo "no_changes=false" >> $GITHUB_OUTPUT
            echo "✅ Changes detected in API documents"
          else
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "ℹ️ No changes detected in API documents"
          fi

      - name: Display API update results
        run: |
          echo "📋 API Update Check Results:"
          echo "============================"
          cat formatted_output.txt

      - name: Fail if changes detected
        if: steps.api-check.outputs.no_changes == 'false'
        run: |
          echo "❌ API changes detected! This workflow is designed to fail when changes are found."
          echo "📄 Check the output above for details about what changed."
          echo "🔧 You may need to review and manually apply these changes."
          exit 1

      - name: Create Pull Request for status message updates
        if: steps.api-check.outputs.no_changes == 'false'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🤖 Auto-update: API documentation and status messages
            
            - Updated API documentation files
            - Updated status message definitions
            - Generated by daily API update workflow
          title: "🤖 Daily API Update - $(date +'%Y-%m-%d')"
          body: |
            ## 🤖 Automated API Update
            
            This PR was automatically created by the daily API update workflow.
            
            ### Changes Detected
            
            The eVatR API has been updated. Please review the changes below:
            
            ```
            $(cat formatted_output.txt)
            ```
            
            ### Next Steps
            
            1. Review the changes in the files
            2. Test the updated API functionality
            3. Update any dependent code if necessary
            4. Merge this PR when ready
            
            ### Files Modified
            
            - API documentation files in `docs/`
            - Potentially `src/constants.ts` if status messages changed
            
            ---
            
            *This PR was created automatically by the [Daily API Update workflow](.github/workflows/daily-api-update.yml)*
          branch: api-update-$(date +'%Y%m%d')
          delete-branch: true
          draft: false

      - name: Comment on workflow failure
        if: failure()
        run: |
          echo "::notice title=API Update Check Failed::The daily API update check has detected changes in the eVatR API. Check the workflow logs for details and review the automatically created PR if one was generated."

      - name: Success notification
        if: steps.api-check.outputs.no_changes == 'true'
        run: |
          echo "✅ No API changes detected. Everything is up to date!"
